For every file:

--->Purpose:

--->Sub Problems for Purpose(Classes/Object... Instances(properties and methods)and functions: 

--->
------>
--------->
------------>
--------------->
--->Global Variables:
--->Imports:
--->Exports:
--->Classes/Object Instances(properties and methods)
--->Functions:
---Other Considerations:




Already Have:
*
.
├── README.md
├── connect-four.js
├── desktop.ini
├── images
│   ├── connect-four.png
│   └── desktop.ini
├── index.html
└── site.css

Have:
1.) connect-four.js
--->Purpose: Register input and alter game state as a result

--->Sub Problems for Purpose:

---> keep track of game state by instantiating the GameDisplay Class 
------>listen for input events in the browser(when new game is started clear names and grid squares), 
--------->update game state, 
------------>render new state in UI(HTML) (Player # === Color piece)
--------------->Disable board if winning condition method
------------------>disable column if full

--->Global Variables:
--->Imports: Game Display Class
--->Exports: ?
--->Classes/Object Instances(properties and methods)
--->Functions: Update Game State, Render New State( Display color pieces on grid element ,player names, winner, or tie below the game board), Player Color(maybe?), 
---Other Considerations: HTML manipulations and event listeners / event triggering






Need:

1.)A module to define(Column Class): 

--->Purpose: A module that contains a class definition that will represent the vertical columns of the grid ( ultimately a class that represents all columns or all rows represents the entire grid... but because of the vertical nature of gravity ... columns make more sense
--->Sub Problems for Purpose (Classes/Object... Instances(properties and methods): 

---> add player(# or Color)-piece **method** ... to the lowest (unclaimed square) ...row that who's intersection with the (event.target-triggering) column is not already occupied
------>method to return the value stored on a row/col intersection
--------->method to check if column is full
------------>
--------------->
--->Global Variables:?
--->Imports:?
--->Exports:Column Class
--->Independent Functions: ?
---> other considerations:




2.) CheckForWin Class
--->Purpose: define a class that checks winning conditions

--->Sub Problems for Purpose:
-> check array of columns for 4 in a row
---> property to contain an array of Columns
------>method: check for 4 of a kind in rows 
--------->method: check for 4 of a kind in columns
------------>method: check for 4 of a kind in diagonals (how on earth?)
--------------->method: Conditionally invoke all 3 winning methods and return winning sequence of squares else return null
--->Global Variables:?
--->Imports: ?maybe instance of column class (prob not)
--->Exports: The CheckForWin Class
--->Classes/Object Instances(properties and methods)
--->Functions: na... all instance methods


3.)
--->Purpose: A module that defines a Game Display Class using the  CheckForWin Class and the Column Class

--->Sub Problems for Purpose(Classes/Object... Instances(properties and methods)and functions: 

---> Game Display Class: to display names and their corresponding colors where they put their pieces and the game status/ game name.. (pl1 vs pl2)/...: 
------>properties (pl1,pl2,current player,winner)
---------> method: to display the grid square each player already occupies
------------>method: play new piece and switch current player
--------------->
--->Global Variables:
--->Imports: Column Class and CheckForWin Class
--->Exports: Game Display Class
--->Classes/Object Instances(properties and methods)
--->Functions:
---Other Considerations: